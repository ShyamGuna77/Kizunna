// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  member        Member?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id String @id

  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Member {
  id               String    @id @default(cuid())
  userId           String    @unique
  name             String    @default("New Member")
  gender           String    @default("Other")
  dateOfBirth      DateTime  @default(now())
  created          DateTime  @default(now())
  updated          DateTime  @updatedAt
  description      String    @default("No description yet")
  city             String    @default("Unknown")
  country          String    @default("Unknown")
  image            String?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos           Photo[]
  likedBy          Like[]    @relation("LikedBy")
  likes            Like[]    @relation("Likes")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@index([userId])
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String?

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
}

model Like {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  createdAt DateTime @default(now())
  from      Member   @relation("Likes", fields: [fromId], references: [id], onDelete: Cascade)
  to        Member   @relation("LikedBy", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
  @@index([fromId])
  @@index([toId])
  @@map("like")
}

model Message {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  isRead    Boolean  @default(false)

  from Member @relation("SentMessages", fields: [fromId], references: [id], onDelete: Cascade)
  to   Member @relation("ReceivedMessages", fields: [toId], references: [id], onDelete: Cascade)

  @@index([fromId])
  @@index([toId])
  @@index([createdAt])
  @@map("message")
}
